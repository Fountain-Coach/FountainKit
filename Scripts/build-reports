#!/usr/bin/env python3
import argparse, json, os, subprocess
from pathlib import Path

def get_json(url, timeout=60):
    out = subprocess.check_output(['curl','-sf', url], timeout=timeout)
    return json.loads(out.decode('utf-8'))

def write(path: Path, text: str):
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(text, encoding='utf-8')

def html_escape(s: str) -> str:
    return s.replace('&','&amp;').replace('<','&lt;').replace('>','&gt;')

def ensure_dir(p: Path):
    p.mkdir(parents=True, exist_ok=True)

def render_catalog_html(persist, corpus, out: Path):
    pages = get_json(f"{persist}/corpora/{corpus}/pages?limit=500&sort=title").get('pages') or []
    rows = []
    for p in pages:
        pid = p.get('pageId')
        segs = get_json(f"{persist}/corpora/{corpus}/segments?limit=200&q={pid}").get('segments') or []
        usage = next((s for s in segs if s.get('kind')=='usage'), None)
        usage_first = (usage.get('text') or '').split('\n')[0] if usage else ''
        rows.append((p.get('title'), p.get('url'), usage_first))
    html = [
        '<!doctype html><meta charset="utf-8"/>',
        '<title>Scripts Catalog (snapshot)</title>',
        '<style>body{font:14px/1.5 -apple-system,Segoe UI,Roboto,Helvetica,Arial;margin:2rem} table{border-collapse:collapse;width:100%}th,td{border:1px solid #ddd;padding:.5rem;text-align:left}th{background:#f7f7f7}</style>',
        f'<h1>Scripts Catalog — corpus {html_escape(corpus)}</h1>',
        '<table><thead><tr><th>Script</th><th>Path</th><th>Usage (first line)</th></tr></thead><tbody>'
    ]
    for title, url, usage in rows:
        html.append(f'<tr><td>{html_escape(title or "")}</td><td><code>{html_escape(url or "")}</code></td><td>{html_escape(usage or "")}</td></tr>')
    html.append('</tbody></table>')
    write(out, '\n'.join(html))

def render_catalog_md(persist, corpus, out: Path):
    pages = get_json(f"{persist}/corpora/{corpus}/pages?limit=500&sort=title").get('pages') or []
    rows = []
    for p in pages:
        pid = p.get('pageId')
        segs = get_json(f"{persist}/corpora/{corpus}/segments?limit=200&q={pid}").get('segments') or []
        usage = next((s for s in segs if s.get('kind')=='usage'), None)
        usage_first = (usage.get('text') or '').split('\n')[0] if usage else ''
        rows.append((p.get('title') or '', p.get('url') or '', usage_first or ''))
    lines = [f"# Scripts Catalog — corpus {corpus}", "", "| Script | Path | Usage (first line) |", "| --- | --- | --- |"]
    for title, url, usage in rows:
        lines.append(f"| {title} | `{url}` | {usage} |")
    write(out, "\n".join(lines))

def render_arc_html(awareness, corpus, out: Path):
    data = get_json(f"{awareness}/corpus/semantic-arc?corpus_id={corpus}")
    arc = data.get('arc') or []
    total = data.get('total') or (data.get('counts',{}).get('pages',0)+data.get('counts',{}).get('segments',0))
    esc_title = html_escape(corpus)
    esc_data = html_escape(json.dumps({'arc': arc, 'total': total}))
    js = (
        "const data = JSON.parse(document.getElementById('data').textContent);\n"
        "const arc = data.arc || [];\n"
        "const ctx = document.getElementById('chart').getContext('2d');\n"
        "const W=860,H=260; const max=Math.max(...arc.map(a=>a.weight),1); const barW=Math.max(20,(W-40)/arc.length-10); const baseY=H-30; const colors=['#4F46E5','#0EA5E9','#10B981','#F59E0B','#EF4444','#8B5CF6','#14B8A6','#64748B'];\n"
        "ctx.font='12px -apple-system, Segoe UI, Roboto, Helvetica, Arial';ctx.fillStyle='#111';ctx.fillText('Phases',10,14);\n"
        "arc.forEach((a,i)=>{const x=20+i*(barW+10);const h=Math.round((a.weight/max)*(H-80));ctx.fillStyle=colors[i%colors.length];ctx.fillRect(x,baseY-h,barW,h);ctx.fillStyle='#111';const label=(a.phase||'').replace(/^[^\\/]+\\//,'');ctx.save();ctx.translate(x+barW/2,H-10);ctx.rotate(-Math.PI/4);ctx.textAlign='right';ctx.fillText(label,0,0);ctx.restore();});\n"
        "const tbody=document.querySelector('#tbl tbody');arc.forEach(a=>{const tr=document.createElement('tr');tr.innerHTML='<'+'td>'+a.phase+'<'+'/td><'+'td>'+a.weight+'<'+'/td><'+'td>'+((a.pct*100).toFixed(1))+'%<'+'/td>';tbody.appendChild(tr);});\n"
    )
    html = (
        '<!doctype html><meta charset="utf-8"/>'
        '<title>Semantic Arc — ' + esc_title + '</title>'
        '<style>body{font:14px/1.5 -apple-system,Segoe UI,Roboto,Helvetica,Arial;margin:2rem}canvas{border:1px solid #eee;border-radius:6px}table{border-collapse:collapse;width:100%;margin-top:1rem}th,td{border:1px solid #ddd;padding:.5rem;text-align:left}th{background:#f7f7f7}</style>'
        '<h1>Semantic Arc — ' + esc_title + '</h1>'
        '<div>Total weight: ' + str(total) + '</div>'
        '<canvas id="chart" width="860" height="260"></canvas>'
        '<table id="tbl"><thead><tr><th>Phase</th><th>Weight</th><th>Percent</th></tr></thead><tbody></tbody></table>'
        '<script id="data" type="application/json">' + esc_data + '</script>'
        '<script>' + js + '</script>'
    )
    write(out, html)

def arc_svg(arc, width=860, height=260):
    # Build a simple SVG bar chart for the arc
    maxw = max([a.get('weight') or 0 for a in arc] + [1])
    barw = max(20, (width - 40) // max(len(arc), 1) - 10)
    baseY = height - 30
    colors = ['#4F46E5','#0EA5E9','#10B981','#F59E0B','#EF4444','#8B5CF6','#14B8A6','#64748B']
    parts = [f'<svg xmlns="http://www.w3.org/2000/svg" width="{width}" height="{height}">']
    parts.append('<rect width="100%" height="100%" fill="#ffffff"/>')
    parts.append('<text x="10" y="14" font-family="-apple-system,Segoe UI,Roboto,Helvetica,Arial" font-size="12">Phases</text>')
    for i,a in enumerate(arc):
        w = a.get('weight') or 0
        h = int((w/maxw) * (height-80))
        x = 20 + i * (barw + 10)
        y = baseY - h
        color = colors[i % len(colors)]
        parts.append(f'<rect x="{x}" y="{y}" width="{barw}" height="{h}" fill="{color}"/>')
        # label
        label = (a.get('phase') or '').split('/')[-1]
        parts.append(f'<text transform="translate({x + barw/2},{height - 10}) rotate(-45)" font-family="-apple-system,Segoe UI,Roboto,Helvetica,Arial" font-size="11" text-anchor="end">{html_escape(label)}</text>')
    parts.append('</svg>')
    return '\n'.join(parts)

def render_arc_md(awareness, corpus, out: Path, img_dir=None):
    data = get_json(f"{awareness}/corpus/semantic-arc?corpus_id={corpus}")
    arc = data.get('arc') or []
    total = data.get('total') or (data.get('counts',{}).get('pages',0)+data.get('counts',{}).get('segments',0))
    lines = [f"# Semantic Arc — {corpus}", "", f"Total weight: {total}"]
    # Optional infographic image
    if img_dir is not None:
        ensure_dir(img_dir)
        svg_name = f"arc_{corpus}.svg"
        (img_dir / svg_name).write_text(arc_svg(arc), encoding='utf-8')
        lines += ["", f"![Semantic Arc](images/{svg_name})", ""]
    lines += ["", "| Phase | Weight | Percent |", "| --- | --- | --- |"]
    for a in arc:
        phase = a.get('phase') or ''
        w = a.get('weight') or 0
        pct = a.get('pct') or 0.0
        lines.append(f"| {phase} | {w} | {pct*100:.1f}% |")
    write(out, "\n".join(lines))

def render_index_md(out_dir: Path, entries):
    lines = ["# Reports", ""]
    for title, rel in entries:
        lines.append(f"- [{title}]({rel})")
    write(out_dir / 'index.md', "\n".join(lines))

def main():
    ap = argparse.ArgumentParser(description='Build static reports (catalog + semantic arc)')
    ap.add_argument('--persist-url', default='http://127.0.0.1:8005')
    ap.add_argument('--awareness-url', default='http://127.0.0.1:8001')
    ap.add_argument('--out-dir', default='Public/reports')
    ap.add_argument('--corpora', default='fountain-scripts,shakespeare-canonical')
    ap.add_argument('--format', choices=['md','html'], default='md')
    args = ap.parse_args()

    persist = args.persist-url if hasattr(args,'persist-url') else args.persist_url
    awareness = args.awareness-url if hasattr(args,'awareness-url') else args.awareness_url
    out_dir = Path(args.out_dir)
    corpora = [c.strip() for c in args.corpora.split(',') if c.strip()]

    links = []
    if args.format == 'md':
        if 'fountain-scripts' in corpora:
            p = out_dir / 'scripts_catalog.md'
            render_catalog_md(persist, 'fountain-scripts', p)
            links.append(('Scripts Catalog (snapshot)', p.name))
        for c in corpora:
            p = out_dir / f'arc_{c}.md'
            img_dir = out_dir / 'images'
            render_arc_md(awareness, c, p, img_dir=img_dir)
            links.append((f'Semantic Arc — {c}', p.name))
        render_index_md(out_dir, links)
    else:
        if 'fountain-scripts' in corpora:
            p = out_dir / 'scripts_catalog.html'
            render_catalog_html(persist, 'fountain-scripts', p)
            links.append(('Scripts Catalog (snapshot)', p.name))
        for c in corpora:
            p = out_dir / f'arc_{c}.html'
            render_arc_html(awareness, c, p)
            links.append((f'Semantic Arc — {c}', p.name))
        # Minimal HTML index builder for html mode
        html = ['<!doctype html><meta charset="utf-8"/><title>Reports</title><style>body{font:14px/1.5 -apple-system,Segoe UI,Roboto,Helvetica,Arial;margin:2rem} a{display:block;margin:.2rem 0}</style><h1>Reports</h1>']
        for title, rel in links:
            html.append(f'<a href="{rel}">{html_escape(title)}</a>')
        write(out_dir / 'index.html', '\n'.join(html))
    print(f"[reports] Wrote static {args.format} reports to {out_dir}")

if __name__ == '__main__':
    main()
