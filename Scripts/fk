#!/usr/bin/env bash
set -euo pipefail

ROOT=$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd)
export ROOT

LAUNCHER_SIGNATURE=${LAUNCHER_SIGNATURE:-B86D7CEE-24C4-4C4C-A107-8D0542D1965B}

die(){ echo "error: $*" >&2; exit 1; }
req(){ command -v "$1" >/dev/null 2>&1 || die "$1 not found; please install"; }

doctor(){
  echo "[fk] Doctor: checking tools…"
  for bin in swift docker jq curl; do
    if command -v "$bin" >/dev/null 2>&1; then echo "✓ $bin"; else echo "✗ $bin (missing)"; fi
  done
}

init(){
  echo "[fk] Initialize tool-server config (.env)…"
  "$ROOT/Scripts/toolserver" init
}

build(){
  echo "[fk] swift build (workspace)…"
  swift build
}

up(){
  echo "[fk] Bringing up core services…"
  LAUNCHER_SIGNATURE="$LAUNCHER_SIGNATURE" DEV_UP_USE_BIN=1 DEV_UP_CHECKS=1 bash "$ROOT/Scripts/dev-up"
}

down(){
  echo "[fk] Shutting down core services…"
  bash "$ROOT/Scripts/dev-down" --force
}

status(){
  echo "[fk] Status (core)…"
  bash "$ROOT/Scripts/dev-status" || true
  echo "[fk] Status (tool-server)…"
  "$ROOT/Scripts/toolserver" status || true
}

api(){
  local url=${1:-}; shift || true
  local method=${METHOD:-GET}
  local data=${DATA:-}
  local file=${FILE:-}
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -X|--method) method=$2; shift 2;;
      -d|--data) data=$2; shift 2;;
      -f|--file) file=$2; shift 2;;
      *) url=${url:-$1}; shift;;
    esac
  done
  [[ -n "$url" ]] || die "usage: fk api <url> [-X METHOD] [-d JSON] [-f FILE]"
  if [[ -n "$file" ]]; then
    curl -sf -X "$method" -H 'Content-Type: application/json' --data-binary @"$file" "$url" | jq .
  elif [[ -n "$data" ]]; then
    curl -sf -X "$method" -H 'Content-Type: application/json' -d "$data" "$url" | jq .
  else
    curl -sf -X "$method" "$url" | jq .
  fi
}

help(){ cat <<USAGE
FountainKit helper CLI (humans + LLMs)

Usage: fk <command>

Commands:
  doctor          Check required tools (swift, docker, jq, curl)
  init            Generate/refresh Tool Server .env
  build           Build entire workspace (swift build)
  up              Start core services (dev-up)
  down            Stop core services (dev-down)
  status          Show status of core services and tool-server
  logs [what]     Stream logs: 'compose' or 'tool-server'
  open <target>   Open common endpoints in browser
  open schema <target>  Open OpenAPI document (/openapi.yaml) for a target
  open list       Print all targets, ports, and URLs
  api <url>       Generic HTTP call with JSON helpers
  export persist  Export pages/segments (and more) to fixtures
  read scene      Render a human-readable scene script (Speech Atlas)

Shortcuts:
  toolserver ...  Proxy to Scripts/toolserver
  ts-api ...      Proxy to Scripts/toolserver-api
  export ...      Proxy to Scripts/export-persist
  read ...        Speech Atlas helpers (scene script)

Examples:
  fk up
  fk status
  fk api http://127.0.0.1:8012/_status
  fk toolserver run exiftool -- -ver
  fk ts-api imagemagick -- magick -version
USAGE
}

case "${1:-help}" in
  doctor) shift; doctor "$@" ;;
  init|configure) shift; init "$@" ;;
  build) shift; build "$@" ;;
  up) shift; up "$@" ;;
  down) shift; down "$@" ;;
  status) shift; status "$@" ;;
  logs)
    shift
    case "${1:-compose}" in
      compose) shift; "$ROOT/Scripts/toolserver" logs compose "$@" ;;
      tool-server) shift; "$ROOT/Scripts/toolserver" logs tool-server "$@" ;;
      *) echo "usage: fk logs <compose|tool-server>" ;;
    esac ;;
  open)
    shift
    if [[ "${1:-}" == "list" ]]; then
      shift || true
      host=${HOST:-127.0.0.1}
      json=0
      while [[ $# -gt 0 ]]; do
        case "$1" in
          --json|-j) json=1; shift;;
          --host) host=$2; shift 2;;
          *) break;;
        esac
      done
      if (( json )); then
        cat <<JSON
[
  {"target":"gateway","port":8010,"metrics":"http://$host:8010/metrics","schema":"http://$host:8010/openapi.yaml"},
  {"target":"baseline-awareness","port":8001,"metrics":"http://$host:8001/metrics","schema":"http://$host:8001/openapi.yaml"},
  {"target":"bootstrap","port":8002,"metrics":"http://$host:8002/metrics","schema":"http://$host:8002/openapi.yaml"},
  {"target":"planner","port":8003,"metrics":"http://$host:8003/metrics","schema":"http://$host:8003/openapi.yaml"},
  {"target":"function-caller","port":8004,"metrics":"http://$host:8004/metrics","schema":"http://$host:8004/openapi.yaml"},
  {"target":"persist","port":8005,"metrics":"http://$host:8005/metrics","schema":"http://$host:8005/openapi.yaml"},
  {"target":"semantic-browser","port":8007,"metrics":"http://$host:8007/metrics","schema":"http://$host:8007/openapi.yaml"},
  {"target":"tools-factory","port":8011,"metrics":"http://$host:8011/metrics","schema":"http://$host:8011/openapi.yaml"},
  {"target":"tool-server","port":8012,"status":"http://$host:8012/_status","schema":"http://$host:8012/openapi.yaml"}
]
JSON
      else
        cat <<LIST
Target            Port   Metrics/Status URL                         Schema URL
gateway           8010   http://$host:8010/metrics                   http://$host:8010/openapi.yaml
baseline-awareness 8001  http://$host:8001/metrics                   http://$host:8001/openapi.yaml
bootstrap         8002   http://$host:8002/metrics                   http://$host:8002/openapi.yaml
planner           8003   http://$host:8003/metrics                   http://$host:8003/openapi.yaml
function-caller   8004   http://$host:8004/metrics                   http://$host:8004/openapi.yaml
persist           8005   http://$host:8005/metrics                   http://$host:8005/openapi.yaml
semantic-browser  8007   http://$host:8007/metrics                   http://$host:8007/openapi.yaml
tools-factory     8011   http://$host:8011/metrics                   http://$host:8011/openapi.yaml
tool-server       8012   http://$host:8012/_status                  http://$host:8012/openapi.yaml
LIST
      fi
      exit 0
    fi
    if [[ "${1:-}" == "schema" ]]; then
      shift
      tgt=${1:-}; shift || true
      [[ -n "$tgt" ]] || { echo "usage: fk open schema <gateway|planner|function-caller|persist|bootstrap|awareness|tools-factory|tool-server|semantic-browser>"; exit 1; }
      case "$tgt" in
        gateway) url=http://127.0.0.1:8010/openapi.yaml ;;
        planner) url=http://127.0.0.1:8003/openapi.yaml ;;
        function-caller) url=http://127.0.0.1:8004/openapi.yaml ;;
        persist) url=http://127.0.0.1:8005/openapi.yaml ;;
        bootstrap) url=http://127.0.0.1:8002/openapi.yaml ;;
        awareness) url=http://127.0.0.1:8001/openapi.yaml ;;
        tools-factory) url=http://127.0.0.1:8011/openapi.yaml ;;
        tool-server) url=http://127.0.0.1:8012/openapi.yaml ;;
        semantic-browser) url=http://127.0.0.1:8007/openapi.yaml ;;
        *) echo "unknown target: $tgt"; exit 1;;
      esac
    else
      tgt=${1:-}; shift || true
      [[ -n "$tgt" ]] || { echo "usage: fk open <gateway|planner|function-caller|persist|bootstrap|awareness|tools-factory|tool-server|semantic-browser>"; exit 1; }
      case "$tgt" in
        gateway) url=http://127.0.0.1:8010/metrics ;;
        planner) url=http://127.0.0.1:8003/metrics ;;
        function-caller) url=http://127.0.0.1:8004/metrics ;;
        persist) url=http://127.0.0.1:8005/metrics ;;
        bootstrap) url=http://127.0.0.1:8002/metrics ;;
        awareness) url=http://127.0.0.1:8001/metrics ;;
        tools-factory) url=http://127.0.0.1:8011/metrics ;;
        tool-server) url=http://127.0.0.1:8012/_status ;;
        semantic-browser) url=http://127.0.0.1:8007/metrics ;;
        *) echo "unknown target: $tgt"; exit 1;;
      esac
    fi
    if command -v open >/dev/null 2>&1; then open "$url"; else xdg-open "$url"; fi ;;
  api) shift; api "$@" ;;
  toolserver) shift; "$ROOT/Scripts/toolserver" "$@" ;;
  ts-api) shift; "$ROOT/Scripts/toolserver-api" "$@" ;;
  export)
    shift
    sub=${1:-}
    case "$sub" in
      persist)
        shift
        "$ROOT/Scripts/export-persist" "$@"
        ;;
      *) echo "usage: fk export persist [--corpus <id>] [--out <dir>] [--url <persist-url>] [--api-key <key>]" ;;
    esac ;;
  read)
    shift
    sub=${1:-}; shift || true
    case "$sub" in
      scene)
        ACT=""; SCENE=""; FORMAT="markdown"; CORPUS="${CORPUS_ID:-the-four-stars}"; BASE="${PERSIST_URL:-http://127.0.0.1:${FOUNTAINSTORE_PORT:-8005}}"; PAGER_ON=1
        while [[ $# -gt 0 ]]; do
          case "$1" in
            --act) ACT=${2:-}; shift 2;;
            --scene) SCENE=${2:-}; shift 2;;
            --format) FORMAT=${2:-}; shift 2;;
            --corpus) CORPUS=${2:-}; shift 2;;
            --url) BASE=${2:-}; shift 2;;
            --no-pager) PAGER_ON=0; shift 1;;
            *) break;;
          esac
        done
        [[ -n "$ACT" && -n "$SCENE" ]] || { echo "usage: fk read scene --act <I> --scene <II> [--format markdown|json] [--corpus id] [--url base] [--no-pager]"; exit 2; }
        req=$(cat <<JSON
{"act":"$ACT","scene":"$SCENE","format":"$FORMAT","group_consecutive":true}
JSON
)
        url="$BASE/arcs/$CORPUS/speeches/script"
        if [[ "$FORMAT" == "json" ]]; then
          curl -sf -X POST "$url" -H 'Content-Type: application/json' -d "$req" | jq .
        else
          body=$(curl -sf -X POST "$url" -H 'Content-Type: application/json' -d "$req" | jq -r '.result.markdown')
          if (( PAGER_ON )) && command -v less >/dev/null 2>&1; then
            printf "%s\n" "$body" | less -R
          else
            printf "%s\n" "$body"
          fi
        fi
        ;;
      *) echo "usage: fk read scene --act <I> --scene <II> [--format markdown|json]" ;;
    esac ;;
  help|--help|-h) help ;;
  *) help ;;
esac
