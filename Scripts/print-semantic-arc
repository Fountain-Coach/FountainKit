#!/usr/bin/env python3
import argparse, json, subprocess

def get_json(url, timeout=30):
    out = subprocess.check_output(['curl','-sf', url], timeout=timeout)
    return json.loads(out.decode('utf-8'))

def main():
    ap = argparse.ArgumentParser(description='Print semantic arc for a corpus via Awareness service')
    ap.add_argument('--awareness-url', default='http://127.0.0.1:8001')
    ap.add_argument('--corpus', required=True)
    args = ap.parse_args()

    data = get_json(f"{args.awareness_url.rstrip('/')}/corpus/semantic-arc?corpus_id={args.corpus}")
    arc = data.get('arc')
    total = data.get('total')
    if arc and total is not None:
        print(f"Semantic Arc for corpus={args.corpus} (total={total})")
        for phase in arc:
            w = phase.get('weight') or 0
            pct = phase.get('pct') or 0.0
            print(f" - {phase.get('phase')}: weight={w} pct={pct:.3f}")
    else:
        # Fallback to counts-only shape
        b = int(data.get('baselines') or 0)
        r = int(data.get('reflections') or 0)
        d = int(data.get('drifts') or 0)
        p = int(data.get('patterns') or 0)
        total = max(b + r + d + p, 1)
        print(f"Semantic Arc (counts) for corpus={args.corpus} (total={total})")
        parts = [('baseline', b), ('reflections', r), ('drift', d), ('patterns', p)]
        for name, weight in parts:
            print(f" - {name}: weight={weight} pct={weight/total:.3f}")

if __name__ == '__main__':
    main()
