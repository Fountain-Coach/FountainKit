#!/usr/bin/env python3
import argparse, json, subprocess
from urllib.parse import quote

def get_json(url, timeout=30):
    out = subprocess.check_output(['curl','-sf', url], timeout=timeout)
    return json.loads(out.decode('utf-8'))

def post_json(url, obj, timeout=30):
    data = json.dumps(obj, ensure_ascii=False).encode('utf-8')
    out = subprocess.check_output(['curl','-sf','-X','POST', url, '-H','Content-Type: application/json', '--data-binary','@-'], input=data, timeout=timeout)
    return json.loads(out.decode('utf-8')) if out else {}

def main():
    ap = argparse.ArgumentParser(description='Register scripts as functions in Persist for Tool Server/Gateway')
    ap.add_argument('--persist-url', default='http://127.0.0.1:8005')
    ap.add_argument('--corpus', default='fountain-scripts')
    args = ap.parse_args()

    base = args.persist_url.rstrip('/')
    # Fetch pages (scripts)
    pages = get_json(f"{base}/corpora/{args.corpus}/pages?limit=500&sort=title").get('pages') or []
    for p in pages:
        pid = p.get('pageId')
        title = p.get('title')
        # Fetch info segment
        segs = get_json(f"{base}/corpora/{args.corpus}/segments?limit=200&q={quote(pid)}").get('segments') or []
        info = next((s for s in segs if s.get('kind') == 'info'), None)
        path = None
        if info:
            try:
                meta = json.loads(info.get('text') or '{}')
                path = meta.get('path')
            except Exception:
                path = None
        name = title
        function_id = f"script:{name}"
        http_path = f"/scripts/run/{name}"
        desc = f"Run stored script {name} (path={path})"
        body = {
            'corpusId': args.corpus,
            'functionId': function_id,
            'name': name,
            'description': desc,
            'httpMethod': 'POST',
            'httpPath': http_path
        }
        try:
            post_json(f"{base}/corpora/{args.corpus}/functions", body)
        except subprocess.CalledProcessError:
            # Skip duplicates
            pass
    print('[scripts] Registered functions for scripts corpus.')

if __name__ == '__main__':
    main()

